snpsDataFrame=read.table('hapmap_CEU_r23a_chr2_ld.txt',header=TRUE)
snpsDataFrame=read.table('hapmap_CEU_r23a_chr2_ld-1.txt',header=TRUE)
dim(snpsDataFrame)
head(snpsDataFrame)
names(snpsDataFrame)
# What are the row names?
row.names(snpsDataFrame)
# Because the data are really just a large numeric matrix, we convert the dataframe to a matrix:
snps=as.matrix(snpsDataFrame)
testSNP=snps["rs218206_G",]
table(testSNP)
het=sum(testSNP==1)/length(testSNP)
# What if there is missing data?
testSNP=snps["rs6717613_A",]
table(testSNP)
testSNP==1
length(testSNP)
is.na(testSNP)
het=sum(testSNP==1)/length(testSNP)  # Note how this fails
het=sum(testSNP==1,na.rm=TRUE)/sum(!is.na(testSNP))  # but this doesn't
het
het=sum(testSNP==1)/length(testSNP)  # Note how this fails
het
het=sum(testSNP==1,na.rm=TRUE)/sum(!is.na(testSNP))  # but this doesn't
het
sum(is.na(testSNP))
freq=sum(testSNP,na.rm=TRUE)/(2.0*sum(!is.na(testSNP)))
calc_freq=function(x){
return(sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x))))
}
calc_het=function(x){
return(sum(x==1,na.rm=TRUE)/(sum(!is.na(x))))
}
freq=apply(snps,1,calc_freq)
het=apply(snps,1,calc_het)
het
plot(freq,het,xlab="Frequency",ylab="Heterozygosity")  # Scatter plot
p=seq(0,0.5,by=0.05)   # Set-up a vector with a sequence of allele frequencies
points(p,2*p*(1-p),type="l",col=2) # Plot the HW expectation as a line in red
points(p,2*p*(1-p),type="l",col=2) # Plot the HW expectation as a line in red
plot(freq,het,xlab="Frequency",ylab="Heterozygosity")  # Scatter plot
# Let's add a line to show what relationship we'd expect under Hardy-Weinberg expectations
p=seq(0,0.5,by=0.05)   # Set-up a vector with a sequence of allele frequencies
points(p,2*p*(1-p),type="l",col=2) # Plot the HW expectation as a line in red
compute_chisquare=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
compute_chisquare_2=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
#here we use the built-in function for the chi-sq distribution:
exp_probs=c((1-freq)^2,2*freq*(1-freq),freq^2) #note, here we don't multiply by n
chisq<-chisq.test(obscnts,p=exp_probs, correct = FALSE)$statistic
return(chisq)
}
chisqs=apply(snps,1,compute_chisquare)
chisqs2=apply(snps,1,compute_chisquare_2)
cor.test(chisqs,chisqs2)
plot(chisqs,chisqs2)
abline(1)
abline(a=1,b=0)
abline(a=0,b=1)
plot(chisqs,chisqs2)
abline(a=0,b=1,lty=2)
pvals=pchisq(chisqs,1,lower.tail=FALSE)
pvals
signifthres<-0.05
sum(pvals<signifthres)
mean(pvals<signifthres)
sig_snps<-subset(pvals,pvals<0.05) #pull out the snps with P-vals<0.05
sig_snp_ids<-names(sig_snps)
sig_geno<-snps[sig_snp_ids,]
