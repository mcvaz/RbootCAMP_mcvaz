N0 <- 25
RR <- 1.05
ttMax <- 100   # total number of timesteps to simulate
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
#Plottheresults
plot(1:ttMax+1,NN, xlab="time", ylab="N", type="b", col=’blue’)
RR = .9
NN
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
plot(1:ttMax+1,NN, xlab="time", ylab="N", type="b", col=’blue’)
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
N0 <- 25
RR <- 1.05
ttMax <- 100   # total number of timesteps to simulate
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
#LoopoverttMaxtimesteps,usingthemodelequationtoupdateNN.
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
#Plottheresults
plot(1:ttMax+1,NN, xlab="time", ylab="N", type="b", col=’blue’)
1:ttMax+1
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col=’blue’)
1:(ttMax+1)
ttMax
NN
length(NN)
1:(ttMax+1)
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col=’blue’)
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col="blue")
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue')
NN[1] <- N0   # set first value to initial condition
RR = .9
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
plot(1:ttMax+1,NN, xlab="time", ylab="N", type="b", col='blue')
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue')
N0 <- 0
RR <- 1.05
ttMax <- 100   # total number of timesteps to simulate
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
#LoopoverttMaxtimesteps,usingthemodelequationtoupdateNN.
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
#Plottheresults
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue')
N0 <- 1000
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue')
jpeg('discr_exp_growth.jpeg')
dev.off()
jpeg('discr_exp_growth.jpeg')
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue')
dev.off()
N0 <- 1
RR <- 1.05
ttMax <- 100   # total number of timesteps to simulate
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue')
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',type="b")
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.2)
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.3)
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.5)
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.5,pch=16)
jpeg('discr_exp_growth.jpeg')
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.5,pch=16)
dev.off()
RR <- 1.5
ttMax <- 100   # total number of timesteps to simulate
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
jpeg('discr_exp_growth.jpeg')
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.5,pch=16)
dev.off()
geometricGrowthFun(N0=10, RR=0.95, ttMax=100){
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.5,pch=16)
}
geometricGrowthFun(N0=10, RR=0.95, ttMax=100)
geometricGrowthFun = function(N0=10, RR=0.95, ttMax=100){
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- RR*NN[tt]
}
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.5,pch=16)
}
geometricGrowthFun()
geometricGrowthFun(RR = 1)
geometricGrowthFun(RR = 1.1)
geometricGrowthFun(N0 = 100)
N0=10
RR=0.95
ttMax=100
KK=250
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN
NN[1] <- N0   # set first value to initial condition
NN[tt+1]
tt
NN[tt+1] <- NN[tt]*(1+RR*(1-NN[tt]/KK))
NN[tt+1]
tt
tt=1
NN[tt+1] <- NN[tt]*(1+RR*(1-NN[tt]/KK))
NN
for (tt in 1:ttMax) {
NN[tt+1] <- NN[tt]*(1+RR*(1-NN[tt]/KK))
}
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.5,pch=16)
source('discrete_logistic.R')
discreteLogisticFun()
discreteLogisticFun(N0=1)
discreteLogisticFun(KK=100)
discreteLogisticFun(RR=.99)
discreteLogisticFun(RR=.95)
discreteLogisticFun(RR=.5)
discreteLogisticFun(RR=.1)
discreteLogisticFun(RR=1.5)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=1.5)
discreteLogisticFun(RR=1.7)
discreteLogisticFun(RR=1.8)
discreteLogisticFun(RR=1.9)
discreteLogisticFun(RR=2)
discreteLogisticFun(RR=3)
discreteLogisticFun(RR=3.14)
discreteLogisticFun(RR=pi)
discreteLogisticFun(RR=3)
discreteLogisticFun(RR=3.1)
discreteLogisticFun(RR=3)
discreteLogisticFun(RR=3.01)
discreteLogisticFun(RR=3.001)
discreteLogisticFun(RR=3.00000001)
discreteLogisticFun(RR=3.0000001)
discreteLogisticFun(RR=3.000001)
discreteLogisticFun(RR=3.00001)
discreteLogisticFun(RR=3.0001)
discreteLogisticFun(RR=3.001)
discreteLogisticFun(RR=3.0002)
discreteLogisticFun(RR=3.0003)
discreteLogisticFun(RR=3.0004)
discreteLogisticFun(RR=3.0001)
discreteLogisticFun(RR=3.0002)
discreteLogisticFun(RR=3.0003)
discreteLogisticFun(RR=3.0004)
discreteLogisticFun(RR=3.0005)
discreteLogisticFun(RR=3.0006)
discreteLogisticFun(RR=3.0002)
discreteLogisticFun(RR=pi)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=1.5)
discreteLogisticFun(RR=1.5)
discreteLogisticFun(N0=1)
discreteLogisticFun(KK=100)
discreteLogisticFun(RR=.1)
discreteLogisticFun(RR=.1)
discreteLogisticFun(RR=.5)
discreteLogisticFun(RR=1)
discreteLogisticFun(RR=1.5)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=.1)
discreteLogisticFun(RR=.5)
discreteLogisticFun(RR=1)
discreteLogisticFun(RR=1.5)
discreteLogisticFun(RR=1.1)
discreteLogisticFun(RR=1.2)
discreteLogisticFun(RR=1.3)
discreteLogisticFun(RR=1.4)
discreteLogisticFun(RR=1.9)
discreteLogisticFun(RR=1.5)
discreteLogisticFun(RR=1.6)
discreteLogisticFun(RR=1.7)
discreteLogisticFun(RR=1.8)
discreteLogisticFun(RR=1.9)
discreteLogisticFun(RR=2)
discreteLogisticFun(RR=1.9)
discreteLogisticFun(RR=1.5)
discreteLogisticFun(RR=1.9) # between 1 and 2, N oscilates around the equilibrium, and then
discreteLogisticFun(RR=2)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=2.1)
discreteLogisticFun(RR=2.2)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=2.1)
discreteLogisticFun(RR=2.2)
discreteLogisticFun(RR=2.3)
discreteLogisticFun(RR=2.4)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=2.1)
discreteLogisticFun(RR=2.4)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=2)
discreteLogisticFun(RR=2.1)
discreteLogisticFun(RR=1.9) # when 1 < r < 2, N oscilates around the equilibrium, and then stabilizes
discreteLogisticFun(RR=2)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=2.4) # when 2 < r < 2.5, N oscilates, but doesn't seem to converge into an equilibrium point
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=2.6)
discreteLogisticFun(RR=2.7)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=2.6)
discreteLogisticFun(RR=2.5)
discreteLogisticFun(RR=2.6) # beggining of chaos?
discreteLogisticFun(RR=2.7)
discreteLogisticFun(RR=2.8)
discreteLogisticFun(RR=2.9)
discreteLogisticFun(RR=3)
discreteLogisticFun(RR=3.1)
discreteLogisticFun(RR=pi)
discreteLogisticFun(RR=3.1)
discreteLogisticFun(N0=10,K=100)
c(-.3,.3,1.3,1.9,2.2,2.7)
par(mfrow=c(2,3))
for(rr in c(-.3,.3,1.3,1.9,2.2,2.7)){
discreteLogisticFun(N0=10,K=100,RR=rr)
}
par(mfrow=c(1,1))
?matplot
RR = c(-.3,.3,1.3,1.9,2.2,2.7)
Nf = numeric(length=length(RR))
discreteLogisticFun = function(N0=10, RR=0.95, KK=250, ttMax=100){
NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values
NN[1] <- N0   # set first value to initial condition
for (tt in 1:ttMax) {
NN[tt+1] <- NN[tt]*(1+RR*(1-NN[tt]/KK))
}
plot(1:(ttMax+1),NN, xlab="time", ylab="N", type="b", col='blue',cex=.5,pch=16)
return(NN)
}
discreteLogisticFun(RR=2.6) # beggining of chaos?
for(rr in c(-.3,.3,1.3,1.9,2.2,2.7)){
discreteLogisticFun(N0=10,K=100,RR=rr)
}
i=1
discreteLogisticFun(N0=10,K=100,RR=RR[i])
discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=1000)
discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=1000)[1001]
RR = c(-.3,.3,1.3,1.9,2.2,2.7)
Nf = numeric(length=length(RR))
for(i in 1:length(RR)){
Nf[i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=1000)[1001]
}
Nf
RR = seq(-1,3,.2)
Nf = numeric(length=length(RR))
for(i in 1:length(RR)){
Nf[i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=1000)[1001]
}
Nf
RR = seq(-1,3,.1)
Nf = numeric(length=length(RR))
for(i in 1:length(RR)){
Nf[i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=1000)[1001]
}
Nf
matplot(RR,Nf)
matplot(RR,Nf,type="l")
RR = seq(-1,3,.1)
Nf = matrix(NA,ncol=length(RR),nrow=100)
dim(Nf)
for(i in 1:length(RR)){
for(j in 1:100){
Nf[j,i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=100+10*j)[1001]
}
}
matplot(RR,Nf,type="l")
RR
as.matrix(RR)
matplot(as.matrix(RR),Nf,type="l")
matplot(as.matrix(RR),t(Nf),type="l")
head(Nf)
length(RR)
Nf = matrix(NA,ncol=length(RR),nrow=20)
for(i in 1:length(RR)){
for(j in 1:100){
Nf[j,i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=100+10*j)[1001]
}
}
RR = seq(-1,3,.5)
RR
RR = seq(-1,3,.5)
Nf = matrix(NA,ncol=length(RR),nrow=20)
for(i in 1:length(RR)){
for(j in 1:20){
Nf[j,i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=100+10*j)[1001]
}
}
RR = seq(-1,3,.5)
Nf = matrix(NA,ncol=length(RR),nrow=20)
for(i in 1:length(RR)){
for(j in 1:20){
Nf[j,i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=100+10*j)[101]
}
}
head(Nf)
RR = seq(-1,3,.5)
Nf = matrix(NA,ncol=length(RR),nrow=20)
for(i in 1:length(RR)){
for(j in 1:20){
Nf[j,i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=100+10*j)[100+10*j]
}
}
head(Nf)
RR = seq(-1,3,.5)
Nf = matrix(NA,ncol=length(RR),nrow=100)
for(i in 1:length(RR)){
for(j in 1:100){
Nf[j,i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=100+10*j)[100+10*j]
}
}
head(Nf)
tail(Nf)
plot(x=RR,y=Nf)
matplot(x=RR,y=Nf)
matplot(x=as.matrix(RR),y=Nf)
matplot(x=as.matrix(RR),y=t(Nf))
matplot(x=as.matrix(RR),y=t(Nf),type='l')
library('deSolve')
expGrowthODE  <- function(tt, yy, pars) {
derivs <- pars[’rr’] * yy
return(list(derivs))
}
expGrowthODE  <- function(tt, yy, pars) {
derivs <- pars[’rr’] * yy
init <- 1
tseq <- seq(0, 20, by=0.01)
pars <- c(rr = 0.1)
expGrowthODE  <- function(tt, yy, pars) {
derivs <- pars[’rr’] * yy
return(list(derivs))
}
pars[’rr’]
expGrowthODE  <- function(tt, yy, pars) {
derivs <- pars['rr'] * yy
return(list(derivs))
}
expGrowthOutput <- lsoda( init, tseq, expGrowthODE, pars)
expGrowthOutput
head(expGrowthOutput)
plot(expGrowthOutput[,1], expGrowthOutput[,2], col=’blue’, type=’l’)
plot(expGrowthOutput[,1], expGrowthOutput[,2], col='blue', type='l')
library('deSolve')
plot(expGrowthOutput[,1], expGrowthOutput[,2], col=’blue’, type=’l’)
source(ODE_exp_growth.R)
source('ODE_exp_growth.R')
c(rr=.1)
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.2))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.5))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=1))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.1))
odeExpGr(init=10,tseq=seq(0,20,.01),pars=c(rr=.1))
odeExpGr(init=100,tseq=seq(0,20,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,1000,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.1))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.5))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=1))
geometricGrowthFun(RR = 1)
geometricGrowthFun(RR = 1.1)
geometricGrowthFun(RR = .9)
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=0))
odeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=-.1))
odeLogGr = function(init=1,tseq=seq(0,20,.01),pars=c(rr=.1,kk=100)){
library('deSolve')
logGrowthODE  <- function(tt, yy, pars) {
derivs <- pars['rr']*yy*(1-yy/kk)
return(list(derivs))
}
logGrowthOutput <- lsoda( init, tseq, logGrowthODE, pars)
plot(logGrowthOutput[,1], logGrowthOutput[,2], col='blue', type='l')
return(logGrowthOutput)
}
source('ODE_log_growth.R')
odeLogGr()
c(rr=.1,kk=100)
odeLogGr = function(init=1,tseq=seq(0,20,.01),pars=c(rr=.1,kk=100)){
library('deSolve')
logGrowthODE  <- function(tt, yy, pars) {
derivs <- pars['rr']*yy*(1-yy/pars['kk'])
return(list(derivs))
}
logGrowthOutput <- lsoda( init, tseq, logGrowthODE, pars)
plot(logGrowthOutput[,1], logGrowthOutput[,2], col='blue', type='l')
return(logGrowthOutput)
}
odeLogGr()
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=10,kk=100))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.5,kk=100))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1,kk=1000))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1,kk=10))
odeLogGr(init=10,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))
odeLogGr(init=100,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))
odeLogGr(init=10,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))
odeLogGr(init=100,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=1,kk=100))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=2.5,kk=100))
odeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=2.9,kk=100))
odeLogGr(init=100,tseq=seq(0,100,.01),pars=c(rr=.5,kk=100))
odeLogGr(init=.01,tseq=seq(0,10,.01),pars=c(rr=.5,kk=200))
odeLogGr(init=1,tseq=seq(0,10,.01),pars=c(rr=.5,kk=200))
odeLogGr(init=.01,tseq=seq(0,10,.01),pars=c(rr=.5,kk=200))
odeLogGr(init=.001,tseq=seq(0,10,.01),pars=c(rr=.5,kk=200))
