{
    "contents" : "---\ntitle: \"Dynamic models\"\nauthor: \"M. Vaz\"\ndate: \"Wednesday, September 23, 2015\"\noutput: html_document\n---\n# 3. Discrete-time, geometric growth model\n## 3.2 Geometric model\n```{r}\n#geometricGrowthScript.R\n#ascripttosimulateandplotthediscretelogisticmodel\n#Setup\n#noneneeded,sinceprogramissosimple\n#Setparametervaluesandinitialconditions,andinitializevariablesforoutput\nN0 <- 25\nRR <- 1.05\nttMax <- 100   # total number of timesteps to simulate\nNN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values\nNN[1] <- N0   # set first value to initial condition\n#LoopoverttMaxtimesteps,usingthemodelequationtoupdateNN.\nfor (tt in 1:ttMax) {\n  NN[tt+1] <- RR*NN[tt]\n  }\n#Plottheresults\nplot(1:(ttMax+1),NN, xlab=\"time\", ylab=\"N\", type=\"b\", col='blue')\n```\n\n### 3.2.1 Mini-exercise\n```{r}\nRR = .9\nNN[1] <- N0   # set first value to initial condition\nfor (tt in 1:ttMax) {\n  NN[tt+1] <- RR*NN[tt]\n  }\nplot(1:(ttMax+1),NN, xlab=\"time\", ylab=\"N\", type=\"b\", col='blue')\n# growth rate just need to be lower than 1 for population size to decline\n\nN0 <- 0\nRR <- 1.05\nttMax <- 100   # total number of timesteps to simulate\nNN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values\nNN[1] <- N0   # set first value to initial condition\nfor (tt in 1:ttMax) {\n  NN[tt+1] <- RR*NN[tt]\n  }\nplot(1:(ttMax+1),NN, xlab=\"time\", ylab=\"N\", type=\"b\", col='blue')\n\nN0 <- 1000\nNN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values\nNN[1] <- N0   # set first value to initial condition\nfor (tt in 1:ttMax) {\n  NN[tt+1] <- RR*NN[tt]\n  }\nplot(1:(ttMax+1),NN, xlab=\"time\", ylab=\"N\", type=\"b\", col='blue')\n# Model's output only qualitatively changes when N0 = 0\n\nN0 <- 1\nRR <- 1.5\nttMax <- 100   # total number of timesteps to simulate\nNN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values\nNN[1] <- N0   # set first value to initial condition\nfor (tt in 1:ttMax) {\n  NN[tt+1] <- RR*NN[tt]\n  }\njpeg('discr_exp_growth.jpeg')\nplot(1:(ttMax+1),NN, xlab=\"time\", ylab=\"N\", type=\"b\", col='blue',cex=.5,pch=16)\ndev.off()\n```\n\n### 3.2.2 Exercise\n```{r}\ngeometricGrowthFun = function(N0=10, RR=0.95, ttMax=100){\n  NN <- matrix(NA, nrow=1, ncol=ttMax+1)  # initialize variable to a vector of NA values\n  NN[1] <- N0   # set first value to initial condition\n  for (tt in 1:ttMax) {\n    NN[tt+1] <- RR*NN[tt]\n    }\n  plot(1:(ttMax+1),NN, xlab=\"time\", ylab=\"N\", type=\"b\", col='blue',cex=.5,pch=16)\n  }\ngeometricGrowthFun()\ngeometricGrowthFun(RR = 1)\ngeometricGrowthFun(RR = 1.1)\ngeometricGrowthFun(N0 = 100)\n```\n\n## 3.3 Logistic growth in discrete time\n```{r}\nsource('discrete_logistic.R')\n```\n\n### 3.3.1 Mini-exercise\n```{r}\ndiscreteLogisticFun(N0=1)\ndiscreteLogisticFun(KK=100)\ndiscreteLogisticFun(RR=.1) # the smallest the r, the longer it takes for N to stabilize\ndiscreteLogisticFun(RR=.5)\ndiscreteLogisticFun(RR=1)\ndiscreteLogisticFun(RR=1.5)\ndiscreteLogisticFun(RR=1.9) # when 1 < r < 2, N oscilates around the equilibrium, and then stabilizes\ndiscreteLogisticFun(RR=2)\ndiscreteLogisticFun(RR=2.1)\ndiscreteLogisticFun(RR=2.2)\ndiscreteLogisticFun(RR=2.3)\ndiscreteLogisticFun(RR=2.4) # when 2 < r < 2.5, N oscilates, but doesn't seem to converge into an equilibrium point\ndiscreteLogisticFun(RR=2.5) # at this r value, N oscillates in two different frequencies\ndiscreteLogisticFun(RR=2.6) # beggining of chaos?\ndiscreteLogisticFun(RR=2.7)\ndiscreteLogisticFun(RR=2.8)\ndiscreteLogisticFun(RR=2.9)\ndiscreteLogisticFun(RR=3)\ndiscreteLogisticFun(RR=3.1) # population collapses!\n```\n\n### 3.3.2 Mini-exercise 2\n```{r}\npar(mfrow=c(2,3))\nfor(rr in c(-.3,.3,1.3,1.9,2.2,2.7)){\n  discreteLogisticFun(N0=10,K=100,RR=rr)\n  }\npar(mfrow=c(1,1))\n```\n\n### 3.3.3 Advanced exercise\n```{r}\nRR = seq(-1,3,.5)\nNf = matrix(NA,ncol=length(RR),nrow=100)\nfor(i in 1:length(RR)){\n  for(j in 1:100){\n    Nf[j,i] = discreteLogisticFun(N0=10,K=100,RR=RR[i],ttMax=100+10*j)[100+10*j]\n    }\n  } \nhead(Nf)\ntail(Nf)\nmatplot(x=as.matrix(RR),y=t(Nf),type='l')\n```\n\n# 4. Differential equation model\n```{r}\nlibrary('deSolve')\n```\n\n## 4.1 Exponential growth\n```{r}\nexpGrowthODE  <- function(tt, yy, pars) {\n  derivs <- pars['rr'] * yy\n  return(list(derivs))\n  }\n\ninit <- 1\ntseq <- seq(0, 20, by=0.01)\npars <- c(rr = 0.1)\n\nexpGrowthOutput <- lsoda( init, tseq, expGrowthODE, pars)\nhead(expGrowthOutput)\n\nplot(expGrowthOutput[,1], expGrowthOutput[,2], col='blue', type='l')\n```\n\n### 4.1.1 Mini-exercise\n```{r}\nsource('ODE_exp_growth.R')\n\nodeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.1))\nodeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.5))\nodeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=1))\nodeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=0))\nodeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=-.1))\n\nodeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.1))\nodeExpGr(init=10,tseq=seq(0,20,.01),pars=c(rr=.1))\nodeExpGr(init=100,tseq=seq(0,20,.01),pars=c(rr=.1))\n\nodeExpGr(init=1,tseq=seq(0,20,.01),pars=c(rr=.1))\nodeExpGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1))\nodeExpGr(init=1,tseq=seq(0,1000,.01),pars=c(rr=.1))\n\n# contrary to the discrete model, N only goes down when r < 0\n```\n\n## 4.2. Logistic growth model\n```{r}\nsource('ODE_log_growth.R')\n```\n\n### 4.2.1 Mini-exercise\n```{r}\nodeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))\nodeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.5,kk=100))\nodeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1,kk=1000))\nodeLogGr(init=1,tseq=seq(0,100,.01),pars=c(rr=.1,kk=10))\nodeLogGr(init=10,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))\nodeLogGr(init=100,tseq=seq(0,100,.01),pars=c(rr=.1,kk=100))\n\n# When N = K, growth is zero\nodeLogGr(init=100,tseq=seq(0,100,.01),pars=c(rr=.5,kk=100))\n\n# By the equation, the closest N is to zero, the closest growth is to the exponential\nodeLogGr(init=1,tseq=seq(0,10,.01),pars=c(rr=.5,kk=200))\nodeLogGr(init=.01,tseq=seq(0,10,.01),pars=c(rr=.5,kk=200))\nodeLogGr(init=.001,tseq=seq(0,10,.01),pars=c(rr=.5,kk=200))\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n\n### \n```{r}\n\n```\n",
    "created" : 1443026180764.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2877425839",
    "id" : "9FDD379E",
    "lastKnownWriteTime" : 1443077820,
    "path" : "C:/Users/Marcel/Dropbox/PhD/CLASSES/RbootCAMP_mcvaz/Exercise2_Dynamic_Models/Dyn_mod.Rmd",
    "project_path" : "Dyn_mod.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}